#version 450
#extension GL_EXT_debug_printf : enable
//Total Threads = Workgroups × Local Size
//
//Где:
//- Workgroups: (X, Y, Z) из vkCmdDispatch
//- Local Size: (X, Y, Z) из layout(local_size_*)
// 
// Шейдер:
//layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
// 
// Dispatch:
//vkCmdDispatch(cmd, 16, 8, 1);
//Всего потоков : 16 × 8 × 1 = 128 workgroups
//Потоков в каждой группе : 64 × 1 × 1 = 64 threads
//Общее количество потоков : 128 × 64 = 8192 threads
// Глобальный ID потока (уникальный для всего dispatch)
//uvec3 globalId = gl_GlobalInvocationID;
// = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID

// ID рабочей группы
//uvec3 workGroupId = gl_WorkGroupID;
// От 0 до параметров dispatch - 1

// Размер рабочей группы
// uvec3 workGroupSize = gl_WorkGroupSize;
// = layout(local_size_x, local_size_y, local_size_z)

// Локальный ID внутри группы
//uvec3 localId = gl_LocalInvocationID;
// От 0 до gl_WorkGroupSize - 1

// ID внутри подгруппы (для оптимизаций)
//uint subgroupId = gl_SubgroupID;
//uint laneId = gl_SubgroupInvocationID;
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;


//Основные правила std430:
//Базовые правила выравнивания:
//Скаляры (int, float, bool): выравнивание = размер типа
//
//Векторы (vec2, vec3, vec4): выравнивание = размер вектора
//
//Массивы: выравнивание = выравнивание элемента
//
//Структуры: выравнивание = максимальное выравнивание среди полей

layout(push_constant) uniform PushConstants {
    uint entitiesNumber_;
};

//POSITIONS
struct Position3D {
    float x_;
    float y_;
    float z_;
};

layout(std430, set = 0, binding = 0) buffer Positions {
    Position3D positions[];
};

//ANIMATION STATE
struct AnimationState {
    uint animationIndex_;
    float animationDuration_;
    float currentTime_;
};

layout(std430, set = 1, binding = 0) readonly buffer AnimationStates {
    AnimationState states[];
};

//ANIMATION INFO

struct Position3DKey {
    float time_;
    float x_; 
    float y_; 
    float z_; 
};

struct Position3DKeys {
    Position3DKey keys_[256];
};

struct Rotation3DKey {
    float time_;
    float w_;
    float x_;
    float y_;
    float z_;
};

struct RotationKeys {
    Rotation3DKey keys_[256];
};

struct Scale3DKey {
    float time_;
    float x_;
    float y_;
    float z_;
};

struct Scale3DKeys {
    Scale3DKey keys_[256];
};
    
struct ModelNodeAnimation {
    Position3DKeys position3DKeys_;
    RotationKeys  rotationKeys_;
    Scale3DKeys  scale3DKeys_;
};

struct ModelNodeAnimations {
    ModelNodeAnimation animations_[8];
};

layout(std430, set = 2, binding = 0) readonly buffer AnimationsData {
    ModelNodeAnimations animations[];
};

void main() {
    uint index = gl_GlobalInvocationID.x;
    if(index < entitiesNumber_){
        AnimationState state = states[index];
        Position3D position = positions[index];
        if(state.animationIndex_ < 8) {
            ModelNodeAnimations animations = animations[index];
            ModelNodeAnimation animation = animations.animations_[state.animationIndex_];
        } else {
            debugPrintfEXT("Invalid animation index.");
        }


        
    }
}