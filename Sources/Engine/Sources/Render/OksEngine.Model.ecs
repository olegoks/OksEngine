ModelComponent = {
    serializable = false
}

ModelEntityComponent = {
    serializable = false,
    fields = {
        { type = "ECS2::Entity::Id", name = "id" }
    }
}

ModelEntityIdsComponent = {
    serializable = false,
    fields = {
        { type = "std::vector<ECS2::Entity::Id>", name = "modelEntityIds" }
    }
}

ModelNameComponent = {
    serializable = false,
    fields = {
        { type = "std::string", name = "modelName" }
    }
}

ModelNodeComponent = {
    serializable = false

}

ChildModelNodeEntitiesComponent = {
    serializable = false,
    fields = {
        { type = "std::vector<ECS2::Entity::Id>", name = "childEntityIds" }
    }
}

ModelNodeEntityIdComponent = {
    serializable = false,
    fields = {
        { type = "ECS2::Entity::Id", name = "nodeEntityId" }
    }
}

ModelNodeEntityIdsComponent = {
    serializable = false,
    fields = {
        { type = "std::vector<ECS2::Entity::Id>", name = "nodeEntityIds" }
    }
}

ModelNodeEntityIndicesComponent = {
    serializable = false,
    fields = {
        { type = "std::vector<Common::Index>", name = "nodeEntityIndices" }
    }
}


ModelFileComponent = {
    fields = {
        { type = "std::string", name = "fileName" } }
}

-- ANIMATION

--NODE
BoneNodeComponent = {
    serializable = false
}

-- DrawStruct = {
--     serializable = false,
--     fields = {
--         { type = "std::vector<ECS2::Entity::Id>", name = "boneEntityIds" },
--         { type = "std::vector<glm::mat4>", name = "bonePallets" }
--     }
-- }

-- DrawInfosComponent = {
--     serializable = false,
--     fields = {
--         { type = "std::vector<Draw>", name = "draws" }
--     }
-- }


UpdateHierarchicalNodeDriverTransform3DSystem = {
    updateMethod = {
    processesEntities = {
        {
            processesComponents = { 
                "WorldPosition3D", 
                "WorldRotation3D", 
                "WorldScale3D",
                { name = "DriverTransform3D", readonly = false }
            },
            excludes = {
                "BoneNode"
            }
        },
        {
            processesComponents = { 
                { name = "RenderDriver", readonly = false }
            }
        }
    }
    }
}

BoneNodeEntitiesComponent = {
    serializable = false,
    fields = {
        { type = "std::vector<ECS2::Entity::Id>", name = "boneEntityIds" }
    }
}
--Index of array its bone index
BonesPalletComponent = {
    serializable = false,
    fields = {
        { type = "std::vector<glm::mat4>", name = "bonesPallets" }
    }
}

DriverBonesPalletComponent = {
    serializable = false,
    fields = {
        { type = "RAL::Driver::UniformBuffer::Id", name = "id" }
    }
}

BonesPalletResourceComponent = {
    serializable = false,
    fields = {
        { type = "RAL::Driver::ResourceSet::Id", name = "id" }
    }
}

BoneInverseBindPoseMatrixComponent = {
    serializable = false,
    fields = {
        { type = "glm::mat4", name = "matrix" }
    }
}

CreateDriverBonesPalletSystem = {
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false }
                }
            },
            {
                processesComponents = {
                    "BonesPallet"
                },
                excludes = {
                    "DriverBonesPallet"
                },
                createsComponents = {
                    "DriverBonesPallet"
                }
            }
        }
    }
}

CreateBonesPalletResourceSystem = {

    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false }
                }
            },
            {
                processesComponents = {
                    "BonesPallet",
                    "DriverBonesPallet"
                },
                excludes = {
                    "BonesPalletResource"
                },
                createsComponents = {
                    "BonesPalletResource"
                }
            }
        }
    }

}

UpdateBonePalletSystem = {
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "Model",
                    "BoneNodeEntities",
                    { name = "BonesPallet", readonly = false }
                }
            }
        },
        accessingEntities = {
            {
                accessingComponents = {
                    "WorldPosition3D",
                    "WorldRotation3D",
                    "WorldScale3D",
                    "BoneInverseBindPoseMatrix"
                }
            }
        }
    }
}



UpdateDriverBonesPalletSystem = {
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false }
                }
            },
            {
                processesComponents = {
                    "BonesPallet",
                    { name = "DriverBonesPallet", readonly = false }
                }
            }
        }
    }
}


ChannelPositionKeyStruct = {
    fields = {
        { type = "double",    name = "time" },
        { type = "glm::vec3", name = "position3D" }
    }
}

ChannelRotationKeyStruct = {
    fields = {
        { type = "double",    name = "time" },
        { type = "glm::quat", name = "rotation3D" }
    }
}

ChannelScaleKeyStruct = {
    fields = {
        { type = "double",    name = "time" },
        { type = "glm::vec3", name = "scale3D" }
    }
}

NodeAnimationChannelStruct = {
    fields = {
        { type = "std::vector<ChannelPositionKey>", name = "position3DValues" },
        { type = "std::vector<ChannelRotationKey>", name = "rotation3DValues" },
        { type = "std::vector<ChannelScaleKey>",    name = "scale3DValues" },
    }
}

HierarchicalAnimationComponent = {
    serializable = false
}

BoneAnimationComponent = {
    serializable = false
}

ModelNodeAnimationComponent = {
    serializable = false,
    fields = {
        { type = "std::map<std::string, NodeAnimationChannel>", name = "animationNameToChannel" }
    }
}
--NODE

ModelAnimationStruct = {
    serializable = false,
    fields = {
        { type = "std::string", name = "name" },
        { type = "double",      name = "durationInTicks" },
        { type = "double",      name = "ticksPerSecond" }
    }
}

ModelAnimationsComponent = {
    serializable = false,
    fields = {
        { type = "std::vector<ModelAnimation>", name = "animations" }
    }
}

RunModelAnimationComponent = {
    fields = {
        { type = "std::string", name = "animationName" }
    }
}

AnimationInProgressComponent = {
    serializable = false,
    fields = {
        { type = "std::string",    name = "animationName" },
        { type = "double",         name = "currentTick" },
        { type = "Common::UInt64", name = "animationStartTimeSinceEngineStart" }
    }
}

StartModelAnimationSystem = {
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "Model",
                    "RunModelAnimation",
                    "ModelAnimations"
                },
                excludes = {
                    "AnimationInProgress"
                },
                createsComponents = {
                    "AnimationInProgress"
                },
                removesComponents = {
                    "RunModelAnimation"
                }
            },
            {
                processesComponents = {
                    "Clock",
                    "TimeSinceEngineStart"
                }
            }
        }
    }
}

ProcessModelAnimationSystem = {
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "Model",
                    "ModelAnimations",
                    "AnimationInProgress",
                    "ChildModelNodeEntities"
                },
                removesComponents = {
                    "AnimationInProgress"
                },
                -- Debug
                 createsComponents = {
                     "RunModelAnimation"
                 }
            },
            {
                processesComponents = {
                    "Clock",
                    "TimeSinceEngineStart"
                }
            }
        },
        accessingEntities = {
            {
                accessingComponents = {
                    "ModelNodeAnimation",
                    "LocalPosition3D",
                    "LocalRotation3D",
                    "LocalScale3D",
                    "ChildModelNodeEntities"
                }
            }
        }
    }
}

MeshComponent = {
    serializable = false
}

MeshNamesComponent = {
    serializable = false,
    fields = {
        { type = "std::vector<std::string>", name = "meshNames" }
    }
}

MeshEntitiesComponent = {
    serializable = false,
    fields = {
        { type = "std::vector<ECS2::Entity::Id>", name = "meshEntityIds" }
    }
}

MeshsFoundComponent = {
    serializable = false
}

AiNamespace = {
    SceneComponent = {
        serializable = false,
        fields = {
            { type = "std::shared_ptr<const aiScene>", name = "scene" }
        }
    },

    CacheComponent = {
        serializable = false,
        fields = {
            { type = "std::map<std::string, std::shared_ptr<const aiScene>>", name = "nametToScene" }
        }
    },

    CreateCacheSystem = {
        type = "Initialize",
        updateMethod = {
            createsEntities = {
                {
                    createsComponents = {
                        "Ai::Cache"
                    }
                }
            }
        }
    },

    NodeComponent = {
        serializable = false,
        fields = {
            { type = "std::shared_ptr<const aiNode>", name = "node" }
        }
    },

    MeshsComponent = {
        serializable = false,
        fields = {
            { type = "std::vector<std::shared_ptr<const aiMesh>>", name = "meshs" }
        }
    },
    CreateSceneSystem = {
        updateMethod = {
            processesEntities = {
                {
                    processesComponents = {
                        { name = "Ai::Cache", readonly = false }
                    }
                },
                {
                    processesComponents = {
                        "MeshsController",
                        { name = "MeshNameToEntity", readonly = false }
                    }
                },
                {
                    processesComponents = {
                        "ResourceSystem"
                    }
                },
                {
                    processesComponents = {
                        "ModelFile"
                    },
                    excludes = {
                        "Model",
                        "Ai::Scene"
                    },
                    createsComponents = {
                        "Model",
                        "Ai::Scene",
                        "MeshNames"
                    }
                }
            },
            createsEntities = {
                {
                    createsComponents = {
                        "Mesh",
                        "Name",
                        "MeshNodes",
                        "Vertices3D",
                        "Indices",
                        "Normals",
                        "UVs",
                        "VertexBones",
                        "TextureInfo",
                        "Texture"
                    }
                },
                {
                    createsComponents = {
                        "ModelNode",
                        "ModelEntity",
                        "ModelNodeEntityIds",
                        "ModelNodeEntityIndices",
                        "Ai::Node",
                        --"Ai::Meshes",
                        "BoneNode",
                        "BoneInverseBindPoseMatrix",
                        "ChildModelNodeEntities",
                        "MeshInfos",
                        --"MeshEntities",
                        "LocalPosition3D",
                        "LocalRotation3D",
                        "LocalScale3D"
                    }
                }
            }
        }
    }
}

MeshsControllerComponent = {
    serializable = false
}

MeshNameToEntityComponent = {
    serializable = false,
    fields = {
        { type = "std::map<std::string, ECS2::Entity::Id>", name = "meshNameToEntityId" }
    }
}

CreateMeshsControllerSystem = {
    type = "Initialize",
    updateMethod = {
        createsEntities = {
            {
                createsComponents = {
                    "MeshsController",
                    "MeshNameToEntity"
                }
            }
        }
    }
}

MeshInfoStruct = {
    fields = {
        { type = "std::string",      name = "name" },
        { type = "ECS2::Entity::Id", name = "meshEntityId" }
    }
}

MeshInfosComponent = {
    serializable = false,
    fields = {
        { type = "std::vector<MeshInfo>", name = "meshInfos" }
    }
}

MeshFoundCreatedComponent = {
    serializable = false
}

NodeToEntityIdComponent = {
    serializable = false,
    fields = {
        { type = "std::map<const aiNode*, ECS2::Entity::Id>", name = "aiNodeToEntityId" }
    }
}

CreateModelNodesSystem = {
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "Model",
                    "ModelFile",
                    "Ai::Scene"
                },
                excludes = {
                    "ChildModelNodeEntities"
                },
                createsComponents = {
                    "NodeToEntityId",
                    "ChildModelNodeEntities"
                }
            }
        },
        createsEntities = {
            {
                createsComponents = {
                    "ModelNode",
                    "ModelEntity",
                    "Ai::Node",
                    --"Ai::Meshes",
                    "BoneNode",
                    "BoneInverseBindPoseMatrix",
                    "ChildModelNodeEntities",
                    "MeshInfos",
                    --"MeshEntities",
                    "LocalPosition3D",
                    "LocalRotation3D",
                    "LocalScale3D"
                }
            }
        }
    }
}

NodeMeshesComponent = {
    serializable = false,
    fields = {
        { type = "ECS2::Entity::Id", name = "id" }
    }
}

MeshNodesComponent = {
    serializable = false,
    fields = {
        { type = "std::vector<ECS2::Entity::Id>", name = "entityIds" }
    }
}

FindModelMeshsSystem = {
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "Model",
                    "MeshNames",
                    { name = "MeshEntities", readonly = false }
                },
                excludes = {
                    "MeshsFound"
                },
                createsComponents = {
                    "MeshsFound"
                }
            },
            {
                processesComponents = {
                    "Mesh",
                    "Name",
                    { name = "ModelEntityIds", readonly = false }
                }
            }
        }
    }
}

CreateNodeMeshsSystem = {
    -- callOrder = {
    --     runAfter = "FindNodeMesh"
    -- },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "MeshsController",
                    { name = "MeshNameToEntity", readonly = false }
                }
            },
            {
                processesComponents = {
                    "ModelNode",
                    "ModelEntity",
                    "Ai::Node",
                    { name = "MeshInfos", readonly = false }
                },
                excludes = {
                    "MeshEntities"
                }
            }
        },
        createsEntities = {
            {
                createsComponents = {
                    "Mesh",
                    "Name",
                    "MeshNodes",
                    "Vertices3D",
                    "Indices",
                    "Normals",
                    "UVs",
                    "VertexBones",
                    "TextureInfo",
                    "Texture"
                }
            }
        },
        accessingEntities = {
            {
                accessingComponents = {
                    "Ai::Scene",
                    "NodeToEntityId"
                }
            },
            {
                accessingComponents = {
                    "MeshNodes"
                }
            }
        }
    }
}

CreateModelSystem = {
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "ModelFile",
                    "WorldPosition3D",
                    "WorldRotation3D",
                    "WorldScale3D"
                },
                excludes = {
                    "Model",
                    "ChildModelNodeEntities"
                },
                createsComponents = {
                    "Model",
                    "ChildModelNodeEntities"
                }
            },
            {
                processesComponents = {
                    "ResourceSystem"
                }
            }
        },
        createsEntities = {
            {
                createsComponents = {
                    "ModelNode",
                    "BoneNode",
                    "BoneInverseBindPoseMatrix",
                    "ChildModelNodeEntities",
                    "MeshEntities",
                    "LocalPosition3D",
                    "LocalRotation3D",
                    "LocalScale3D"
                }
            },
            {
                createsComponents = {
                    "Mesh",
                    "Name",
                    "Vertices3D",
                    "Indices",
                    "Normals",
                    "UVs",
                    "VertexBones",
                    "TextureInfo",
                    "Texture"
                }
            }
        }
    }
}


RenderPassComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "rpId" }
    }
}

CreateRenderPassSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = {
            "CreateRenderDriver"
        }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "RenderDriver"
                },
                excludes = {
                    "RenderPass"
                },
                createsComponents = {
                    "RenderPass"
                }
            }
        }
    }
}

RenderAttachmentComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "textureId" }
    }
}

CreateRenderAttachmentSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = { "CreateRenderPass" },
        runBefore = {}
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "RenderDriver"
                },
                excludes = {
                    "RenderAttachment"
                },
                createsComponents = {
                    "RenderAttachment"
                }
            }
        }
    }
}

DepthAttachmentComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "textureId" }
    }
}

CreateDepthAttachmentSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = { "CreateRenderPass" },
        runBefore = {}
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "RenderDriver"
                },
                excludes = {
                    "DepthAttachment"
                },
                createsComponents = {
                    "DepthAttachment"
                }
            }
        }
    }
}

AttachmentSetComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "attachmentsSetId" } -- Synonym of VkFramebuffer
    }
}

CreateAttachmentSetSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = { "CreateRenderAttachment", "CreateDepthAttachment" },
        runBefore = {}
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "RenderDriver",
                    "RenderPass",
                    "RenderAttachment",
                    "DepthAttachment"
                },
                excludes = {
                    "AttachmentSet"
                },
                createsComponents = {
                    "AttachmentSet"
                }
            }
        }
    }
}

PipelineComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "id" }
    }
}

CreatePipelineSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = {
            "CreateRenderDriver",
            "CreateResourceSystem",
            "ConfigureResourceSystem",
            "CreateRenderPass"
        }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "RenderDriver",
                    "RenderPass"
                },
                excludes = {
                    "Pipeline"
                },
                createsComponents = {
                    "Pipeline"
                }
            },
            {
                processesComponents = {
                    "ResourceSystem"
                }
            }
        }
    }
}

SkeletonModelPipelineComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "id" }
    }
}

CreateSkeletonModelPipelineSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = {
            "CreateRenderDriver",
            "CreateResourceSystem",
            "ConfigureResourceSystem",
            "CreateRenderPass",
            "CreateDepthAttachment",
            "CreateRenderAttachment"
        }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "RenderDriver",
                    "RenderPass"
                },
                excludes = {
                    "SkeletonModelPipeline"
                },
                createsComponents = {
                    "SkeletonModelPipeline"
                }
            },
            {
                processesComponents = {
                    "ResourceSystem"
                }
            }
        }
    }
}

UpdateLocalPosition3DSystem = {
    callOrder = {
        runBefore = { "StartRender" }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "Model",
                    "ChildModelNodeEntities",
                    "WorldPosition3D",
                    "WorldRotation3D",
                    "WorldScale3D"
                }
            }
        },
        accessingEntities = {
            {
                accessingComponents = {
                    "WorldPosition3D",
                    "WorldRotation3D",
                    "WorldScale3D",
                    "LocalPosition3D",
                    "LocalRotation3D",
                    "LocalScale3D",
                    "ChildModelNodeEntities"
                }
            }
        }
    }
}

ComputeNamespace = {

    PipelineComponent = {
        serializable = false,
        fields = {
            { type = "Common::Id", name = "pipelineId" }
        }
    },
    CreatePipelineSystem = {
        type = "Initialize",
        callOrder = {
            runAfter = {
                "CreateRenderDriver"
            }
        },
        updateMethod = {
            processesEntities = {
                {
                    processesComponents = {
                        "ResourceSystem"
                    }
                },
                {
                    processesComponents = {
                        "RenderDriver"
                    },
                    excludes = {
                        "Pipeline"
                    },
                    createsComponents = {
                        "Pipeline"
                    }
                }-- },
                -- {
                --     processesComponents = {

                --     }
                -- }
            }
        }
    },
    TestPipelineSystem = {
        updateMethod = {
            processesEntities = {
                {
                    processesComponents = {
                        "RenderDriver",
                        "Pipeline",
                        "Render::StorageBufferResource"
                    }
                }
            }
        }
    }
}


BeginRenderPassSystem = {
    callOrder = {
        runAfter = { "StartRender" },
        runBefore = { "AddModelToRender" }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false },
                    "RenderPass",
                    "AttachmentSet",
                    "Pipeline"
                }
            }
        }
    }
}

AddModelToRenderSystem = {
    callOrder = {
        runAfter = "BeginRenderPass",
        runBefore = "EndRenderPass"
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "Camera",
                    "Active",
                    "DriverViewProjectionUniformBuffer",
                    "CameraTransformResource"
                }
            },
            {
                processesComponents = {
                    "Indices",
                    "DriverIndexBuffer",
                    "DriverVertexBuffer",
                    "TextureResource",
                    "ModelEntityIds",
                    "ModelNodeEntityIndices"
                },
                excludes = {
                    "VertexBones"
                }
            },
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false },
                    "RenderPass",
                    "Pipeline"
                }
            }
        },
        accessingEntities = {
            {
                accessingComponents = {
                    "ModelNodeEntityIds"
                }
            },
            {
                accessingComponents = {
                    "DriverTransform3D",
                    "Transform3DResource"
                }
            }
        }
    }
}

AddSkeletonModelToRenderSystem = {
    callOrder = {
        runAfter = "BeginRenderPass",
        runBefore = "EndRenderPass"
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false },
                    "RenderPass",
                    "SkeletonModelPipeline"
                }
            },
            {
                processesComponents = {
                    "Camera",
                    "Active",
                    "DriverViewProjectionUniformBuffer",
                    "CameraTransformResource"
                }
            },
            {
                processesComponents = {
                    "ModelEntityIds",
                    "Indices",
                    "DriverIndexBuffer",
                    "DriverVertexBuffer",
                    "TextureResource",
                    "VertexBones"
                }
            },

        },
        accessingEntities = {
            {
                accessingComponents = {
                    "DriverTransform3D",
                    "Transform3DResource",
                    "BonesPalletResource"
                }
            }
        }
    }
}

EndRenderPassSystem = {
    callOrder = {
        runBefore = { "BeginImGuiRenderPass" }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false },
                    "RenderPass",
                    "Pipeline"
                }
            }
        }
    }
}
