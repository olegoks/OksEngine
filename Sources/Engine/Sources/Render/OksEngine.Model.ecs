ModelComponent = {
    serializable = false
 }

ModelNodeComponent = { 
    serializable = false

}

ChildModelNodeEntitiesComponent = {
        serializable = false,
    fields = { 
        { type = "std::vector<ECS2::Entity::Id>", name = "childEntityIds" }
    }
}

ModelNodeEntityIdComponent = {
    serializable = false,
    fields = { 
        { type = "ECS2::Entity::Id", name = "nodeEntityId" }
    }
}

MeshEntitiesComponent = {
    serializable = false,
    fields = { 
        { type = "std::vector<ECS2::Entity::Id>", name = "meshEntityIds" }
    }
}

ModelFileComponent = {
    fields = { 
        { type = "std::string", name = "fileName"} }
}

-- ANIMATION

--NODE
ChannelPositionKeyStruct = {
    fields = {
        { type = "double", name = "time" },
        { type = "glm::vec3", name = "position3D" }
    }
}

ChannelRotationKeyStruct = {
    fields = {
        { type = "double", name = "time" },
        { type = "glm::quat", name = "rotation3D" }
    }
}

ChannelScaleKeyStruct = {
    fields = {
        { type = "double", name = "time" },
        { type = "glm::vec3", name = "scale3D" }
    }
}

NodeAnimationChannelStruct = {
    fields = {
        { type = "std::vector<ChannelPositionKey>", name = "position3DValues" },
        { type = "std::vector<ChannelRotationKey>", name = "rotation3DValues" },
        { type = "std::vector<ChannelScaleKey>", name = "scale3DValues" },
    }
}

ModelNodeAnimationComponent = {
    serializable = false,
    fields = {
        { type = "std::map<std::string, NodeAnimationChannel>", name = "animationNameToChannel" }
    }
}
--NODE

--MODEL

ModelAnimationStruct = {
    serializable = false,
    fields = {
        { type = "std::string", name = "name" },
        { type = "double", name = "durationInTicks" },
        { type = "double", name = "ticksPerSecond" }
    }
}

ModelAnimationsComponent = {
    serializable = false,
    fields = {
        { type = "std::vector<ModelAnimation>", name = "animations" }
    }
}

RunModelAnimationComponent = {
    fields = {
        { type = "std::string", name = "animationName" }
    }
}

AnimationInProgressComponent = {
    serializable = false,
    fields = {
        { type = "std::string", name = "animationName" },
        { type = "double", name = "currentTick" },
        { type = "Common::UInt64", name = "animationStartTimeSinceEngineStart" }
    }
}

StartModelAnimationSystem = {
    updateMethod = {
        processesEntities = {
            {
                processesComponents = { 
                    "Model",
                    "RunModelAnimation",
                    "ModelAnimations"
	            },
                excludes = {
                    "AnimationInProgress"
                },
                createsComponents = {
                    "AnimationInProgress"
                },
                removesComponents = {
                    "RunModelAnimation"
                }
            },
            {
                processesComponents = { 
                    "Clock",
                    "TimeSinceEngineStart"
                }
            }
        }
    }
}

ProcessModelAnimationSystem = {
    updateMethod = {
        processesEntities = {
            {
                processesComponents = { 
                    "Model",
                    "ModelAnimations",
                    "AnimationInProgress",
                    "ChildModelNodeEntities"
	            },
                removesComponents = {
                    "AnimationInProgress"
                },
                -- Debug
                createsComponents = {
                    "RunAnimation"
                }
            },
            {
                processesComponents = { 
                    "Clock",
                    "TimeSinceEngineStart"
                }
            }
        }
    }
}

--MODEL

--ANIMATION


CreateModelSystem = {
    updateMethod = {
        processesEntities = {
            {
                processesComponents = { 
                    "ModelFile",
                    "WorldPosition3D",
                    "WorldRotation3D",
                    "WorldScale3D"
	            },
                excludes = {
                    "Model",
                    "ChildModelNodeEntities"
                },
                createsComponents = {
                    "Model",
                    "ChildModelNodeEntities"
                }
            },
            {
                processesComponents = {
                    "ResourceSystem"
                }
            }
        },
        createsEntities = {
            {
                createsComponents = {
                    "ModelNode",
                    "ChildModelNodeEntities",
                    "MeshEntities",
                    "LocalPosition3D",
                    "LocalRotation3D",
                    "LocalScale3D"
                }
            },
            {
                createsComponents = {
                    "Name",
                    "NodeEntityId",
                    "Vertices3D",
                    "Indices",
                    "Normals",
                    "UVs",
                    "TextureInfo",
                    "Texture"
                }
            }
        }
    }
}


RenderPassComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "rpId" },
        { type = "Common::Id", name = "attachmentsSetId" }, -- Synonym of VkFramebuffer
        { type = "std::vector<Common::Id>", name = "textureIds" }
    }
}

CreateRenderPassSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = {
            "CreateRenderDriver"
        }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "RenderDriver"
                },
                excludes = {
                    "RenderPass"
                },
                createsComponents = {
                    "RenderPass"
                }
            }
        }
    }
}


PipelineComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "id" }
    }
}

CreatePipelineSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = {
            "CreateRenderDriver",
            "CreateResourceSystem",
            "ConfigureResourceSystem",
            "CreateRenderPass"
        }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "RenderDriver",
                    "RenderPass"
                },
                excludes = {
                    "Pipeline"
                },
                createsComponents = {
                    "Pipeline"
                }
            },
            {
                processesComponents = {
                    "ResourceSystem"
                }
            }
        }
    }
}

UpdateLocalPosition3DSystem = {
    callOrder = {
        runBefore = { "StartRender" }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "Model",
                    "ChildModelNodeEntities",
                    "WorldPosition3D",
                    "WorldRotation3D",
                    "WorldScale3D"
                }
            }
        }
    }
}

BeginRenderPassSystem = {
    callOrder = {
        runAfter = { "StartRender" },
        runBefore = { "AddModelToRender" }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false},
                    "RenderPass",
                    "Pipeline"
                }
            }
        }
    }
}

AddModelToRenderSystem = {
    callOrder = {
        runAfter = "BeginRenderPass",
        runBefore = "EndRenderPass"
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "Camera",
                    "Active",
                    "DriverViewProjectionUniformBuffer",
                    "CameraTransformResource"
                }
            },
            {
                processesComponents = {
                    "Indices",
                    "DriverIndexBuffer",
                    "DriverVertexBuffer",
                    "TextureResource",
                    "ModelNodeEntityId"
                }
            },
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false},
                    "RenderPass",
                    "Pipeline"
                }
            }
        },
        accessingEntities = {
            {
                accessingComponents = {
                    "DriverTransform3D",
                    "Transform3DResource"
                }
            }
        }
    }
}

EndRenderPassSystem = {
    callOrder = {
        runBefore = { "BeginImGuiRenderPass" }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false },
                    "RenderPass",
                    "Pipeline"
                }
            }
        }
    }
}

