ModelComponent = {
    serializable = false
}

ModelEntityComponent = {
    serializable = false,
    fields = {
        { type = "ECS2::Entity::Id", name = "id" }
    }
}

MeshMaxModelsNumberConstant = {
    type = "Common::Size",
    value = "1024"
}

ModelEntityIdsComponent = {
    serializable = false,
    fields = {
        { type = "std::array<ECS2::Entity::Id, MeshMaxModelsNumber>", name = "modelEntityIds" }
    }
}

ModelNameComponent = {
    serializable = false,
    fields = {
        { type = "std::string", name = "modelName" }
    }
}

ModelNodeComponent = {
    serializable = false

}



ModelNodesMaxNumberConstant = {
    type = "Common::Size",
    value = "512"
}

ChildModelNodeEntitiesMaxNumberConstant = {
    type = "Common::Size",
    value = "32"
}

ChildModelNodeEntitiesComponent = {
    serializable = false,
    fields = {
        { type = "std::vector<ECS2::Entity::Id>", name = "childEntityIds" }
    }
}

ModelNodeEntityIdComponent = {
    serializable = false,
    fields = {
        { type = "ECS2::Entity::Id", name = "nodeEntityId" }
    }
}

ModelNodeEntityIdsComponent = {
    serializable = false,
    manualEditFunction = true,
    fields = {
        { type = "std::array<ECS2::Entity::Id, ModelNodesMaxNumber>", name = "nodeEntityIds" }
    }
}

ModelNodeEntityIndicesComponent = {
    serializable = false,
    fields = {
        { type = "std::vector<Common::Index>", name = "nodeEntityIndices" }
    }
}


ModelFileComponent = {
    fields = {
        { type = "std::string", name = "fileName" } }
}

-- ANIMATION

--NODE
BoneNodeComponent = {
    serializable = false
}

-- DrawStruct = {
--     serializable = false,
--     fields = {
--         { type = "std::vector<ECS2::Entity::Id>", name = "boneEntityIds" },
--         { type = "std::vector<glm::mat4>", name = "bonePallets" }
--     }
-- }

-- DrawInfosComponent = {
--     serializable = false,
--     fields = {
--         { type = "std::vector<Draw>", name = "draws" }
--     }
-- }


UpdateHierarchicalNodeDriverTransform3DSystem = {
    disable = true,
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "WorldPosition3D",
                    "WorldRotation3D",
                    "WorldScale3D",
                    { name = "DriverTransform3D", readonly = false }
                },
                excludes = {
                    "BoneNode"
                }
            },
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false }
                }
            }
        }
    }
}

BoneNodeEntitiesComponent = {
    serializable = false,
    fields = {
        { type = "std::array<ECS2::Entity::Id, ModelNodesMaxNumber>", name = "boneEntityIds" }
    }
}

BoneInverseBindPoseMatrixComponent = {
    serializable = false,
    fields = {
        { type = "glm::mat4", name = "matrix" }
    }
}


ModelAnimationStruct = {
    serializable = false,
    fields = {
        { type = "std::string", name = "name" },
        { type = "double",      name = "durationInTicks" },
        { type = "double",      name = "ticksPerSecond" }
    }
}

ModelAnimationsComponent = {
    serializable = false,
    manualEditFunction = true,
    fields = {
        { type = "std::vector<ModelAnimation>", name = "animations" }
    }
}

RunModelAnimationComponent = {
    fields = {
        { type = "std::string", name = "animationName" }
    }
}

AnimationInProgressComponent = {
    serializable = false,
    manualEditFunction = true,
    fields = {
        { type = "Common::UInt64", name = "animationIndex" },
        { type = "double",         name = "currentTick" },
        { type = "double",         name = "durationInTicks" },
        { type = "double",         name = "ticksPerSecond" },
        { type = "Common::UInt64", name = "animationStartTimeSinceEngineStart" }
    }
}

PauseAnimationComponent = {
    serializable = false
}

ProcessModelSystem = {
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "Clock",
                    "TimeSinceEngineStart"
                }
            },
            {
                processesComponents = {
                    "Model",
                    "WorldPosition3D",
                    "WorldRotation3D",
                    "WorldScale3D",
                    "Render::Model::ModelDataEntityId",
                    "ChildModelNodeEntities"
                },
                createsComponents = {
                    "AnimationInProgress"
                },
                removesComponents = {
                    "RunModelAnimation",
                    "AnimationInProgress",
                    "Animation::Model::Node::RunningState"
                }
            },

        },
        accessingEntities = {
            {
                accessingComponents = {
                    "ModelAnimations"
                }
            },
            {
                accessingComponents = {
                    "WorldPosition3D",
                    "WorldRotation3D",
                    "WorldScale3D",
                    "RunModelAnimation",
                    "PauseAnimation",
                    "AnimationInProgress"
                },
                removesComponents = {
                    "AnimationInProgress"
                },
                createsComponents = {
                    "RunModelAnimation"
                }
            },
            {
                accessingComponents = {
                    "LocalPosition3D",
                    "WorldPosition3D",
                    "LocalRotation3D",
                    "WorldRotation3D",
                    "LocalScale3D",
                    "WorldScale3D",
                    "Animation::Model::Node::RunningState",
                    "ChildModelNodeEntities"
                },
                removesComponents = {
                    "Animation::Model::Node::RunningState"
                },
                createsComponents = {
                    "Animation::Model::Node::RunningState"
                }
            },
            {
                archetype = "Render::Model::Node",
            },
        }
    }
}

-- ProcessModelAnimationSystem = {

--     updateMethod = {
--         processesEntities = {
--             {
--                 processesComponents = {
--                     "Model",
--                     "ModelAnimations",
--                     "AnimationInProgress",
--                     "ChildModelNodeEntities"
--                 },
--                 removesComponents = {
--                     "AnimationInProgress"
--                 },
--                 -- Debug
--                 createsComponents = {
--                     "RunModelAnimation"
--                 }
--             },
--             {
--                 processesComponents = {
--                     "Clock",
--                     "TimeSinceEngineStart"
--                 }
--             }
--         },
--         accessingEntities = {
--             {
--                 accessingComponents = {
--                     "ModelNodeAnimation",
--                     "LocalPosition3D",
--                     "LocalRotation3D",
--                     "LocalScale3D",
--                     "ChildModelNodeEntities"
--                 },
--                 removesComponents = {
--                     "Animation::Model::Node::RunningState"
--                 }
--             }
--         }
--     }
-- }

MeshComponent = {
    serializable = false
}

MeshNamesComponent = {
    serializable = false,
    fields = {
        { type = "std::vector<std::string>", name = "meshNames" }
    }
}

MeshEntitiesComponent = {
    serializable = false,
    fields = {
        { type = "std::vector<ECS2::Entity::Id>", name = "meshEntityIds" }
    }
}

MeshsFoundComponent = {
    serializable = false
}

AiNamespace = {
    SceneComponent = {
        serializable = false,
        fields = {
            { type = "std::shared_ptr<const aiScene>", name = "scene" }
        }
    },

    CacheComponent = {
        serializable = false,
        fields = {
            { type = "std::map<std::string, std::shared_ptr<const aiScene>>", name = "nametToScene" }
        }
    },

    CreateCacheSystem = {
        type = "Initialize",
        updateMethod = {
            createsEntities = {
                {
                    createsComponents = {
                        "Ai::Cache"
                    }
                }
            }
        }
    },

    NodeComponent = {
        serializable = false,
        fields = {
            { type = "std::shared_ptr<const aiNode>", name = "node" }
        }
    },

    MeshsComponent = {
        serializable = false,
        fields = {
            { type = "std::vector<std::shared_ptr<const aiMesh>>", name = "meshs" }
        }
    },
    CreateSceneSystem = {
        updateMethod = {
            processesEntities = {
                {
                    processesComponents = {
                        { name = "Ai::Cache", readonly = false }
                    }
                },
                {
                    processesComponents = {
                        "MeshsController",
                        { name = "MeshNameToEntity", readonly = false }
                    }
                },
                {
                    processesComponents = {
                        "ResourceSystem"
                    }
                },
                {
                    processesComponents = {
                        "ModelFile"
                    },
                    excludes = {
                        "Model",
                        "Ai::Scene"
                    },
                    createsComponents = {
                        "Model",
                        "Ai::Scene",
                        "MeshNames"
                    }
                },
                {
                    processesComponents = {
                        "Render::Model::DataController",
                        { name = "Render::Model::ModelNameToModelDataEntityId", readonly = false }
                    }
                }
            },
            createsEntities = {
                {
                    createsComponents = {
                        "Mesh",
                        "Name",
                        "MeshNodes",
                        "Vertices3D",
                        "Indices",
                        "Normals",
                        "UVs",
                        "VertexBones",
                        "TextureInfo",
                        "Texture"
                    }
                },
                {
                    createsComponents = {
                        "ModelNode",
                        "ModelEntity",
                        "ModelNodeEntityIds",
                        "ModelNodeEntityIndices",
                        "Ai::Node",
                        --"Ai::Meshes",
                        "BoneNode",
                        "BoneInverseBindPoseMatrix",
                        "ChildModelNodeEntities",
                        "MeshInfos",
                        "Animation::Model::Node::Animations",
                        --"MeshEntities",
                        "LocalPosition3D",
                        "LocalRotation3D",
                        "LocalScale3D"
                    }
                }
            }
        }
    }
}


--MODEL DATA
RenderNamespace = {
    ModelNamespace = {
        NodeArchetype = {
            components = {
                "ModelNode",
                "BoneNode",
                "Name",
                "ModelEntity",
                "LocalPosition3D",
                "WorldPosition3D",
                "LocalRotation3D",
                "WorldRotation3D",
                "LocalScale3D",
                "WorldScale3D",
                "ChildModelNodeEntities",
                "DebugText2D",
                "Animation::Model::Node::RunningState",
                "ModelDataEntityId",
                "ModelNodeDataEntityId"
            }
        },
        Node_DataArchetype = {
            components = {
                "ModelNode",
                "Name",
                "ModelEntity",
                "ChildModelNodeEntities",
                "ModelDataEntityId", -- Data model entity id
                "BoneNode",
                "BoneInverseBindPoseMatrix"

            },
            archetypes = {
                "Animation::Animation"
            }
        },
        ModelDataComponent = {
            serializable = false
        },
        ModelNodeDataEntityIdComponent = {
            description =
            "This component will have node entity to have access to node data like animations, bone inverse bind pose matrix.",
            serializable = false,
            fields = {
                { type = "ECS2::Entity::Id", name = "modelNodeDataEntityId" }
            }
        },
        ModelDataEntityIdComponent = {
            description =
            "This component will have model entity to have access to model data like animations, mesh data.",
            serializable = false,
            fields = {
                { type = "ECS2::Entity::Id", name = "modelDataEntityId" }
            }
        },
        DataControllerComponent = {},
        ModelNameToModelDataEntityIdComponent = {
            description =
            "Controller for models data. It will be used by model loader to find model data and take it if model was loaded early or to add model data if it is not exist.",
            serializable = false,
            fields = {
                {
                    type = "std::map<std::string, ECS2::Entity::Id>",
                    name = "modelNameToModelDataEntityId"
                }
            }
        },
        CreateDataControllerSystem = {
            type = "Initialize",
            updateMethod = {
                createsEntities = {
                    {
                        createsComponents = {
                            "DataController",
                            "ModelNameToModelDataEntityId"
                        }
                    }
                }
            }
        },
        
    }
}
FindModelDataSystem = {
    description = "Find model data for models and set nodes data entity ids for model nodes to have fast acces to animations and bone inverse bind matices.",
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "Model",
                    "ModelFile",
                    "ModelNodeEntityIds"
                },
                excludes = {
                    "Render::Model::ModelDataEntityId"
                },
                createsComponents = {
                    "Render::Model::ModelDataEntityId"
                }
            },
            {
                processesComponents = {
                    "Render::Model::DataController",
                    "Render::Model::ModelNameToModelDataEntityId"
                }
            }
        },
        accessingEntities = {
            {
                accessingComponents = {
                    "ModelNodeEntityIds"
                }
            }
        }
    }
}

--MODEL DATA

MeshsControllerComponent = {
    serializable = false
}

MeshNameToEntityComponent = {
    serializable = false,
    fields = {
        { type = "std::map<std::string, ECS2::Entity::Id>", name = "meshNameToEntityId" }
    }
}

CreateMeshsControllerSystem = {
    type = "Initialize",
    updateMethod = {
        createsEntities = {
            {
                createsComponents = {
                    "MeshsController",
                    "MeshNameToEntity"
                }
            }
        }
    }
}

MeshInfoStruct = {
    fields = {
        { type = "std::string",      name = "name" },
        { type = "ECS2::Entity::Id", name = "meshEntityId" }
    }
}

MeshInfosComponent = {
    serializable = false,
    fields = {
        { type = "std::vector<MeshInfo>", name = "meshInfos" }
    }
}

MeshFoundCreatedComponent = {
    serializable = false
}

NodeToEntityIdComponent = {
    serializable = false,
    fields = {
        { type = "std::map<const aiNode*, ECS2::Entity::Id>", name = "aiNodeToEntityId" }
    }
}

NodeMeshesComponent = {
    serializable = false,
    fields = {
        { type = "ECS2::Entity::Id", name = "id" }
    }
}

MeshNodesComponent = {
    serializable = false,
    fields = {
        { type = "std::vector<ECS2::Entity::Id>", name = "entityIds" }
    }
}

FindModelMeshsSystem = {
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "Model",
                    "MeshNames",
                    { name = "MeshEntities", readonly = false }
                },
                excludes = {
                    "MeshsFound"
                },
                createsComponents = {
                    "MeshsFound"
                }
            },
            {
                processesComponents = {
                    "Mesh",
                    "Name",
                    { name = "ModelEntityIds", readonly = false }
                }
            }
        }
    }
}

RenderPassComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "rpId" }
    }
}

CreateRenderPassSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = {
            "CreateRenderDriver"
        }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "RenderDriver"
                },
                excludes = {
                    "RenderPass"
                },
                createsComponents = {
                    "RenderPass"
                }
            }
        }
    }
}

RenderAttachmentComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "textureId" }
    }
}

CreateRenderAttachmentSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = { "CreateRenderPass" },
        runBefore = {}
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "RenderDriver"
                },
                excludes = {
                    "RenderAttachment"
                },
                createsComponents = {
                    "RenderAttachment"
                }
            }
        }
    }
}

DepthAttachmentComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "textureId" }
    }
}


CreateDepthAttachmentSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = { "CreateRenderPass" },
        runBefore = {}
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "RenderDriver"
                },
                excludes = {
                    "DepthAttachment"
                },
                createsComponents = {
                    "DepthAttachment"
                }
            }
        }
    }
}


MultisamplingAttachmentComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "textureId" }
    }
}

CreateMultisamplingAttachmentSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = { "CreateRenderPass" },
        runBefore = {}
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "RenderDriver"
                },
                excludes = {
                    "MultisamplingAttachment"
                },
                createsComponents = {
                    "MultisamplingAttachment"
                }
            }
        }
    }
}

AttachmentSetComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "attachmentsSetId" } -- Synonym of VkFramebuffer
    }
}

CreateAttachmentSetSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = { "CreateRenderAttachment", "CreateDepthAttachment" },
        runBefore = {}
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "RenderDriver",
                    "RenderPass",
                    "RenderAttachment",
                    "MultisamplingAttachment",
                    "DepthAttachment"
                },
                excludes = {
                    "AttachmentSet"
                },
                createsComponents = {
                    "AttachmentSet"
                }
            }
        }
    }
}

PipelineComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "id" }
    }
}

CreatePipelineSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = {
            "CreateRenderDriver",
            "CreateResourceSystem",
            "ConfigureResourceSystem",
            "CreateRenderPass"
        }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "RenderDriver",
                    "RenderPass"
                },
                excludes = {
                    "Pipeline"
                },
                createsComponents = {
                    "Pipeline"
                }
            },
            {
                processesComponents = {
                    "ResourceSystem"
                }
            }
        }
    }
}

SkeletonModelPipelineComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "id" }
    }
}

CreateSkeletonModelPipelineSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = {
            "CreateRenderDriver",
            "CreateResourceSystem",
            "ConfigureResourceSystem",
            "CreateRenderPass",
            "CreateDepthAttachment",
            "CreateRenderAttachment"
        }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "RenderDriver",
                    "RenderPass"
                },
                excludes = {
                    "SkeletonModelPipeline"
                },
                createsComponents = {
                    "SkeletonModelPipeline"
                }
            },
            {
                processesComponents = {
                    "ResourceSystem"
                }
            }
        }
    }
}


ComputeNamespace = {

    PipelineComponent = {
        serializable = false,
        fields = {
            { type = "Common::Id", name = "pipelineId" }
        }
    },
    CreatePipelineSystem = {
        type = "Initialize",
        callOrder = {
            runAfter = {
                "CreateRenderDriver"
            }
        },
        updateMethod = {
            processesEntities = {
                {
                    processesComponents = {
                        "ResourceSystem"
                    }
                },
                {
                    processesComponents = {
                        "RenderDriver"
                    },
                    excludes = {
                        "Pipeline"
                    },
                    createsComponents = {
                        "Pipeline"
                    }
                } -- },
                -- {
                --     processesComponents = {

                --     }
                -- }
            }
        }
    },
    TestPipelineSystem = {
        runAfter = "ProcessModel",
        updateMethod = {
            processesEntities = {
                {
                    processesComponents = {
                        "RenderDriver",
                        "Pipeline",
                        "Render::StorageBufferResource",
                        "Animation::ModelNodeDataEntityIds",
                        "Animation::NodeDataEntityIdsToComponentIndices",
                        "Animation::Model::Node::DriverAnimationsComponents",
                        "Animation::Model::Node::AnimationsComponentsResource",
                        "Animation::Model::Node::DriverRunningStates",
                        "Animation::Model::Node::RunningStatesResource",
                        "Animation::DriverLocalPosition3DComponents",
                        "Animation::LocalPosition3DComponentsResource",
                        "Animation::DriverLocalRotation3DComponents",
                        "Animation::LocalRotation3DComponentsResource"
                    }
                }
            }
        }
    }
}


BeginRenderPassSystem = {
    callOrder = {
        runAfter = { "StartRender" },
        runBefore = { "AddModelToRender" }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false },
                    "RenderPass",
                    "AttachmentSet",
                    "Pipeline"
                }
            }
        }
    }
}

AddModelToRenderSystem = {
    callOrder = {
        runAfter = "BeginRenderPass",
        runBefore = "EndRenderPass"
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "Camera",
                    "Active",
                    "DriverViewProjectionUniformBuffer",
                    "CameraTransformResource"
                }
            },
            {
                processesComponents = {
                    "Indices",
                    "DriverIndexBuffer",
                    "DriverVertexBuffer",
                    "TextureResource",
                    "ModelEntityIds",
                    "ModelNodeEntityIndices"
                },
                excludes = {
                    "VertexBones"
                }
            },
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false },
                    "RenderPass",
                    "Pipeline"
                }
            }
        },
        accessingEntities = {
            {
                accessingComponents = {
                    "ModelNodeEntityIds"
                }
            },
            {
                accessingComponents = {
                    "DriverTransform3D",
                    "Transform3DResource"
                }
            }
        }
    }
}

AddSkeletonModelToRenderSystem = {
    callOrder = {
        runAfter = "BeginRenderPass",
        runBefore = "EndRenderPass"
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false },
                    "RenderPass",
                    "SkeletonModelPipeline",
                    "GPGPUECS::StorageBuffer::NodeDataEntityIdsToComponentIndices",
                    "GPGPUECS::StorageBuffer::ModelNodeDataEntityIds",
                    "GPGPUECS::StorageBuffer::NodeEntityIdsToComponentIndices",
                    "GPGPUECS::StorageBuffer::ModelEntityIdsToComponentIndices",
                    "GPGPUECS::StorageBuffer::ModelEntityIds",
                    "GPGPUECS::StorageBuffer::WorldPositions3D",
                    "GPGPUECS::StorageBuffer::WorldRotations3D",
                    "GPGPUECS::StorageBuffer::WorldScales3D",
                    "GPGPUECS::StorageBuffer::BoneNodeEntities",
                    "GPGPUECS::StorageBuffer::BoneInverseBindPoseMatrices"
                }
            },
            {
                processesComponents = {
                    "Camera",
                    "Active",
                    "DriverViewProjectionUniformBuffer",
                    "CameraTransformResource"
                }
            },
            -- {
            --     processesComponents = {
            --         "ModelEntityIds",
            --         "Indices",
            --         "DriverIndexBuffer",
            --         "DriverVertexBuffer",
            --         "TextureResource",
            --         "VertexBones"
            --     }
            -- },
        },
        accessingEntities = {
            {
                archetype = "Render::Model::Node",
                -- accessingComponents = {
                --     "ModelNode",
                --     "Name",
                --     "ModelEntity",
                --     "LocalPosition3D",
                --     "WorldPosition3D",
                --     "LocalRotation3D",
                --     "WorldRotation3D",
                --     "LocalScale3D",
                --     "WorldScale3D",
                --     "ChildModelNodeEntities",
                --     "DriverTransform3D",
                --     "Transform3DResource",
                --     "DebugText2D",
                --     "BoneNode",
                --     "BoneInverseBindPoseMatrix",
                --     "Animation::Model::Node::RunningState",
                --     "Animation::Model::Node::Animations",

                -- }
            },
            {
                archetype = "Render::Model::Node_Data"
            },
            {
                archetype = "Model"
            },
            {
                archetype = "Model_Data"
            },
            {
                archetype = "Mesh"
            }
        }

    }

}


EndRenderPassSystem = {
    callOrder = {
        runBefore = { "BeginImGuiRenderPass" }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false },
                    "RenderPass",
                    "Pipeline"
                }
            }
        }
    }
}

ModelArchetype = {
    components = {
        "Name",
        "WorldPosition3D",
        "WorldRotation3D",
        "WorldScale3D",
        "DriverTransform3D",
        "Transform3DResource",
        "ModelFile",
        "Model",
        "ModelNodeEntityIds",
        "BoneNodeEntities",
        "RunModelAnimation",
        "AnimationInProgress",
        "PauseAnimation",
        "ChildModelNodeEntities",
        "MeshNames",
        "MeshEntities",
        "MeshsFound",
        "Render::Model::ModelDataEntityId"
    }
}

Model_DataArchetype = {
    components = {
        "Name",
        "Model",
        "BoneNodeEntities",
        "ModelNodeEntityIds",
        "ModelAnimations",
        "ChildModelNodeEntities",
    }
}

--Skeleton mesh
MeshArchetype = {
    components = {
        "Mesh",
        "Name",
        "ModelName",
        "ModelEntityIds",
        "ModelNodeEntityIndices",
        "Vertices3D",
        "DriverVertexBuffer",
        "Indices",
        "DriverIndexBuffer",
        "Normals",
        "UVs",
        "VertexBones",
        "Texture",
        "TextureInfo",
        "DriverTexture",
        "TextureResource"
    }
}



-- BoneArchetype = {
--     components = {
--         "BoneNode",
--         "BoneInverseBindPoseMatrix"
--     }
-- }

-- Node_AnimatedArchetype = {
--     archetypes = {
--         "Render::Model::Node",
--         "Animation::Animation"
--     }
-- }

-- Node_BoneArchetype = {
--     archetypes = {
--         "Render::Model::Node",
--         "Bone"
--     }
-- }

-- Node_Bone_AnimatedArchetype = {
--     archetypes = {
--         "Render::Model::Node",
--         "Bone",
--         "Animation::Animation"
--     }
-- }
