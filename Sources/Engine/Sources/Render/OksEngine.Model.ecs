ModelComponent = { }

ModelFileComponent = {
    fields = { 
        { type = "std::string", name = "fileName"} }
}

CreateModelSystem = {
    updateMethod = {
        processesEntities = {
            {
                processesComponents = { 
		            "Model",
                    "ModelFile"
	            },
                excludes = {
                    "Position3D",
                    "Rotation3D",
                    "Vertices3D",
                    "Indices",
                    "UVs"
                },
                createsComponents = {
                    "Position3D",
                    "Rotation3D",
                    "Vertices3D",
                    "Indices",
                    "Normals",
                    "UVs",
                    "TextureInfo",
                    "Texture"
                }
            },
            {
                processesComponents = {
                    "ResourceSystem"
                }
            }
        },
        createsEntities = {
            createsComponents = {
                "Vertices3D",
                "Indices",
                "Normals",
                "UVs"
            }
        }
    }
}


RenderPassComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "rpId" },
        { type = "Common::Id", name = "attachmentsSetId" }, -- Synonym of VkFramebuffer
        { type = "std::vector<Common::Id>", name = "textureIds" }
    }
}

CreateRenderPassSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = {
            "CreateRenderDriver"
        }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "RenderDriver"
                },
                excludes = {
                    "RenderPass"
                },
                createsComponents = {
                    "RenderPass"
                }
            }
        }
    }
}


PipelineComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "id" }
    }
}

CreatePipelineSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = {
            "CreateRenderDriver",
            "CreateResourceSystem",
            "ConfigureResourceSystem",
            "CreateRenderPass"
        }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "RenderDriver",
                    "RenderPass"
                },
                excludes = {
                    "Pipeline"
                },
                createsComponents = {
                    "Pipeline"
                }
            },
            {
                processesComponents = {
                    "ResourceSystem"
                }
            }
        }
    }
}


BeginRenderPassSystem = {
    callOrder = {
        runAfter = { "StartRender" },
        runBefore = { "AddModelToRender" }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false},
                    "RenderPass",
                    "Pipeline"
                }
            }
        }
    }
}

AddModelToRenderSystem = {
    callOrder = {
        runAfter = "BeginRenderPass",
        runBefore = "EndRenderPass"
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "Camera",
                    "Active",
                    "DriverViewProjectionUniformBuffer",
                    "CameraTransformResource"
                }
            },
            {
                processesComponents = {
                    "Model",
                    "Transform3DResource",
                    "Indices",
                    "DriverIndexBuffer",
                    "DriverVertexBuffer",
                    "TextureResource"
                }
            },
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false},
                    "RenderPass",
                    "Pipeline"
                }
            }
        }
    }
}

EndRenderPassSystem = {
    callOrder = {
        runBefore = { "BeginImGuiRenderPass" }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false },
                    "RenderPass",
                    "Pipeline"
                }
            }
        }
    }
}

