-- LINES

-- LINES

-- TEXT

-- Add this component to show debug text
DebugText2DComponent = {
    fields = {
        { type = "std::string", name = "text" },
        { type = "Common::UInt32", name = "x" },
        { type = "Common::UInt32", name = "y" },
    }
}

DebugTextRendererComponent = { }

CreateDebugTextRendererSystem = {
    type = "Initialize",
    updateMethod = {
        -- TODO: read fonts atlas from Config
        createsEntities = {
            {
                createsComponents = {
                    "DebugTextRenderer"
                }
            }
        }
    }
}

SymbolMetadataStruct = {

    fields = {
        { type = "glm::vec2", name = "uvMin" },
        { type = "glm::vec2", name = "uvMax" },
        { type = "glm::ivec2", name = "size" },
        { type = "glm::ivec2", name = "bearing" },
        { type = "Common::UInt32", name = "advanceX" },
        { type = "Common::UInt32", name = "advanceY" }
    }
}

SymbolsMetadataComponent = {
    serializable = false,
    fields = {
        { type = "std::map<char, SymbolMetadata>", name = "symbolsMetadata"}
    }
}

DebugTextVertexBufferComponent = {
    serializable = false,
    fields = { { type = "Geom::VertexCloud<Geom::Vertex2ftc>", name = "vertices" } }
}

CreateDebugTextVertexBufferSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = { 
        "CreateDebugTextRenderer",
        "CreateRenderDriver" }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "DebugTextRenderer"
                },
                createsComponents = {
                    "DebugTextVertexBuffer"
                },
                excludes = { "DebugTextVertexBuffer" }
            },
            {
                processesComponents = { 
                    { name = "RenderDriver", readonly = false } 
                }
            }
        }
    }
}

UpdateDebugTextVertexBufferSystem = {
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "DebugTextRenderer",
                    "SymbolsMetadata",
                    { name = "DebugTextVertexBuffer", readonly = false }
                }
            },
            {
                processesComponents = {
                    "DebugText2D"
                }
            }
        }
    }
}


DebugTextDriverVertexBufferComponent = {
    serializable = false,
    fields = { 
        { type="RAL::Driver::VertexBuffer::Id", name="id" },
        { type="Common::Size", name="capacity" },
        { type="Common::Size", name="size" }
    }
}

CreateTextDriverVertexBufferSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = { 
        "CreateDebugTextRenderer",
        "CreateRenderDriver" }

    
    },
    updateMethod = {
     processesEntities = {
        {
            processesComponents = {
                "DebugTextRenderer"
            },
            createsComponents = {
                "DebugTextDriverVertexBuffer"
            },
            excludes = { "DebugTextDriverVertexBuffer" }
        },
        {
            processesComponents = { 
                { name = "RenderDriver", readonly = false } 
            }
        }
    }
    }
}

UpdateDebugTextDriverVertexBufferSystem = {
    updateMethod = {
     processesEntities = {
        {
            processesComponents = {
                "DebugTextRenderer",
                { name = "DebugTextVertexBuffer",readonly = false },
                { name = "DebugTextDriverVertexBuffer", readonly = false }
            }
        },
        {
            processesComponents = { 
                { name = "RenderDriver", readonly = false } 
            }
        },
        {
            processesComponents = { 
                "DebugText2D"
            }
        }
    }
    }
}

CreateDebugTextAtlasSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = "CreateDebugTextRenderer"
    },
    updateMethod = {
        -- TODO: read fonts atlas from Config
        processesEntities = {
            {
                processesComponents = {
                    { name = "ResourceSystem", readonly = false }
                }
            },
            {
                processesComponents = {
                    "DebugTextRenderer"
                },
                excludes = { "Texture" },
                createsComponents = { "Texture" }
            }
        }
    }
}


DebugTextRenderPassComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "rpId" }
        -- { type = "Common::Id", name = "attachmentsSetId" }, -- Synonym of VkFramebuffer
        -- { type = "std::vector<Common::Id>", name = "textureIds" }
    }
}

CreateDebugTextRenderPassSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = {
            "CreateRenderDriver",
            "CreateDebugTextRenderer"
        }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "RenderDriver",
                    "RenderPass",
                    "Pipeline"
                }
            },
            {   
                processesComponents = {
                    "DebugTextRenderer"
                },
                excludes = {
                    "DebugTextRenderPass"
                },
                createsComponents = {
                    "DebugTextRenderPass"
                }
            }
        }
    }
}

DebugTextAttachmentSetComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "attachmentSetId" }
    }
}

CreateDebugTextAttachmentSetSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = { 
            "CreateRenderAttachment", 
            "CreateDepthAttachment",
            "CreateDebugTextRenderer",
            "CreateDebugTextRenderPass" },
        runBefore = {}
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    "RenderDriver",
                    "MultisamplingAttachment"
                }
            },
            {
                processesComponents = {
                    "DebugTextRenderer",
                    "DebugTextRenderPass"
                },
                excludes = {
                    "DebugTextAttachmentSet"
                },
                createsComponents = {
                    "DebugTextAttachmentSet"
                }
            }
        }
    }
}

DebugTextPipelineComponent = {
    serializable = false,
    fields = {
        { type = "Common::Id", name = "id" }
    }
}



CreateDebugTextPipelineSystem = {
    type = "Initialize",
    callOrder = {
        runAfter = {
            "CreateRenderDriver",
            "CreateResourceSystem",
            "CreateDebugTextRenderer",
            "CreateDebugTextRenderPass"
        }
    },
    updateMethod = {
        processesEntities = {
             {
                processesComponents = {
                    "RenderDriver"
                }
            },
            {
                processesComponents = {
                    "ResourceSystem"
                }
            },
            {   
                processesComponents = {
                    "DebugTextRenderer",
                    "DebugTextRenderPass"
                },
                excludes = {
                    "DebugTextPipeline"
                },
                createsComponents = {
                    "DebugTextPipeline"
                }
            }
        }
    }
}

BeginDebugTextRenderPassSystem = {
    callOrder = {
        runAfter = { "StartRender" },
        runBefore = { "DrawDebugText2D" }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false}
                }
            },
            {
                processesComponents = {
                    "DebugTextRenderer",
                    "DebugTextRenderPass",
                    "DebugTextAttachmentSet",
                    "DebugTextPipeline"
                }
            }
        }
    }
}

 DrawDebugText2DSystem = {
    callOrder = {
        runAfter = "BeginDebugTextRenderPass",
        runBefore = "EndDebugTextRenderPass"
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false},
                    "RenderPass",
                    "Pipeline"
                }
            },
            {
                processesComponents = {
                    "DebugTextRenderer",
                    "DebugTextRenderPass",
                    "DebugTextPipeline",
                    "SymbolsMetadata",
                    "DebugTextDriverVertexBuffer",
                    "TextureResource"
                }
            },
            {
                processesComponents = {
                    "DebugText2D"
                }
            }
        }
    }
}

EndDebugTextRenderPassSystem = {
    callOrder = {
        runAfter = { "DrawDebugText2D" },
        runBefore = { "BeginImGuiRenderPass" }
    },
    updateMethod = {
        processesEntities = {
            {
                processesComponents = {
                    { name = "RenderDriver", readonly = false},
                    "RenderPass",
                    "Pipeline"
                }
            },
            {
                processesComponents = {
                    "DebugTextRenderer",
                    "DebugTextRenderPass",
                    "DebugTextPipeline"
                }
            }
        }
    }
}


-- TEXT